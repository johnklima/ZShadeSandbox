//===============================================================================================================================
// ShaderStruct.h
//
//===============================================================================================================================
// History
//
// -Created on 4/10/2014 by Dustin Watson
//===============================================================================================================================
#ifndef __SHADERSTRUCT_H
#define __SHADERSTRUCT_H
//=================================================================================================================
//=================================================================================================================

//
//Includes
//

#include <sstream>
#include "D3DIncludes.h"
#include "BetterString.h"
using namespace std;

//=================================================================================================================
//=================================================================================================================
namespace ZShadeSandboxShader {
namespace EShaderTypes
{
	enum
	{
		ST_NONE,
		ST_VERTEX,
		ST_HULL,
		ST_DOMAIN,
		ST_PIXEL,
		ST_GEOMETRY,
		ST_COMPUTE
	};
}
//=================================================================================================================
//=================================================================================================================
struct ShaderBase
{
	ID3DBlob*			  mBlobData;
	BetterString		  mName;
	int					  mType;

	ShaderBase()
	:  mBlobData(0)
	,  mName("")
	, mType(EShaderTypes::ST_NONE)
	{
	}
};
//=================================================================================================================
//=================================================================================================================
struct VertexShader : public ShaderBase
{
	ID3D11VertexShader*   mShader;
	VertexShader() : ShaderBase(), mShader(0) { mType = EShaderTypes::ST_VERTEX; }
	~VertexShader() { SAFE_RELEASE(mShader); }
};
//=================================================================================================================
//=================================================================================================================
struct HullShader : public ShaderBase
{
	ID3D11HullShader*     mShader;
	HullShader() : ShaderBase(), mShader(0) { mType = EShaderTypes::ST_HULL; }
	~HullShader() { SAFE_RELEASE(mShader); }
};
//=================================================================================================================
//=================================================================================================================
struct DomainShader : public ShaderBase
{
	ID3D11DomainShader*   mShader;
	DomainShader() : ShaderBase(), mShader(0) { mType = EShaderTypes::ST_DOMAIN; }
	~DomainShader() { SAFE_RELEASE(mShader); }
};
//=================================================================================================================
//=================================================================================================================
struct PixelShader : public ShaderBase
{
	ID3D11PixelShader*    mShader;
	PixelShader() : ShaderBase(), mShader(0) { mType = EShaderTypes::ST_PIXEL; }
	~PixelShader() { SAFE_RELEASE(mShader); }
};
//=================================================================================================================
//=================================================================================================================
struct GeometryShader : public ShaderBase
{
	ID3D11GeometryShader* mShader;
	GeometryShader() : ShaderBase(), mShader(0) { mType = EShaderTypes::ST_GEOMETRY; }
	~GeometryShader() { SAFE_RELEASE(mShader); }
};
//=================================================================================================================
//=================================================================================================================
struct ComputeShader : public ShaderBase
{
	ID3D11ComputeShader*  mShader;
	ComputeShader() : ShaderBase(), mShader(0) { mType = EShaderTypes::ST_COMPUTE; }
	~ComputeShader() { SAFE_RELEASE(mShader); }
};
}
//=================================================================================================================
//=================================================================================================================
#endif//__SHADERSTRUCT_H