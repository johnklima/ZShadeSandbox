//===============================================================================================================================
// SLList
//
//===============================================================================================================================
// History
//
// -Created on 4/2/2015 by Dustin Watson
//===============================================================================================================================
#ifndef __SLLIST_H
#define __SLLIST_H
//===============================================================================================================================
//===============================================================================================================================
#include "LNode.h"
//===============================================================================================================================
// Single-linked list
template <typename T>
class SLList
{
protected:
	
	LNode<T>* head;
	LNode<T>* tail;

public:

	SLList();

	// Clears the list
	void clear();

	// Adds a item to the end of the list
	void add(T* item);

	// Returns the first element in the list
	T* first();

	// Returns true if the list is empty
	bool isEmpty();
};
//===============================================================================================================================
template <typename T>
SLList<T>::SLList()
{
	clear();
}
//===============================================================================================================================
template <typename T>
void SLList<T>::clear()
{
	head = tail = nullptr;
}
//===============================================================================================================================
template <typename T>
void SLList<T>::add(T* item)
{
	if (head == nullptr)
	{
		head = item;
	}
	else
	{
		tail->next = item;
	}

	item->next = nullptr;
	tail = item;
}
//===============================================================================================================================
template <typename T>
T* SLList<T>::first()
{
	return head;
}
//===============================================================================================================================
template <typename T>
bool SLList<T>::isEmpty()
{
	return head == nullptr;
}
//===============================================================================================================================
//===============================================================================================================================
#endif//__SLLIST_H